{"version":3,"sources":["utils/mutations.js","utils/auth.js","pages/Login.js","utils/queries.js","pages/AccountSummary.js","pages/dashboard.js","pages/Contact.js","pages/Policy.js","pages/Signup.js","pages/MakeTransfer.js","pages/Home.js","pages/Transactions.js","images/swiftbank_logo.png","components/NavandPage.js","components/Footer.js","components/ContentContainer.js","utils/reducers.js","utils/actions.js","components/GlobalState.js","App.js","index.js"],"names":["LOGIN","gql","CREATE_USER","MAKE_TRANSACTION","CHANGE_TRANS_STATUS","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Login","useState","email","setEmail","password","setPassword","useMutation","login","handleSubmit","error","e","preventDefault","variables","data","Auth","replace","console","log","Box","sx","flexGrow","component","m","width","noValidate","autoComplete","TextField","required","id","label","onChange","target","value","type","Button","variant","onClick","QUERY_GETME","QUERY_USER_TRANSACTIONS","style","bgcolor","AccountSummary","transactions","List","map","transaction","index","ListItem","ListItemText","primary","name","createdAt","secondary","amount","Divider","styles","main","paddingTop","paddingBottom","Dashboard","useQuery","loading","accounts","getMe","firstName","account","Accordion","AccordionSummary","expandIcon","Typography","product","description","_id","accountBalance","AccordionDetails","bottomPadding","Contact","finePrint","fontSize","Policy","Signup","setFirstName","lastName","setLastName","addUser","SubmitRegister","vars","auth","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","MakeTransfer","fromAccount","setFromAccount","toAccount","setToAccount","setAmount","makeTrans","cheese","isNaN","parseFloat","alert","acctId","transferId","FormControl","InputLabel","Select","labelId","multiple","document","querySelector","textContent","input","OutlinedInput","MenuItem","accountNumber","button","margin","paddingRight","Transactions","admin","getProfile","tStatus","setTStatus","appTrans","holenso","cabocha","users","getAllUsers","tId","prompt","tString","transId","status","approverId","handleTStatus","u","a","t","transferTo","tertiary","fullWidth","drawerWidth","contentPadding","user","loggedIn","userOptions","link","loginOptions","adminOptions","extraOptions","Container","props","currentPage","setCurrentPage","React","mobileOpen","setMobileOpen","logout","handleDrawerToggle","drawer","Toolbar","Link","href","height","alt","src","logo","option","disablePadding","ListItemButton","container","undefined","body","display","CssBaseline","AppBar","position","sm","ml","IconButton","color","edge","mr","noWrap","flexShrink","Drawer","open","onClose","ModalProps","keepMounted","xs","boxSizing","p","renderPage","footer","background","bottom","Footer","Page","reducer","state","action","newAccount","payload","newUser","accIndex","findIndex","updatedAccount","list","newTransaction","newProduct","products","filter","isLoggedIn","UserContext","createContext","Provider","UserProvider","initialState","isAdmin","userName","clientId","useReducer","dispatch","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","concat","cache","InMemoryCache","App","ApolloProvider","className","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6bcd92b7.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\n\nexport const LOGIN = gql`\nmutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      userId {\n        _id\n      }\n    }\n  }\n`\nexport const CREATE_USER = gql`\nmutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      userId {\n        _id\n      }\n    }\n  }\n`\nexport const OPEN_ACCOUNT = gql`\nmutation approveAccount($acctId: ID!, $newStatus: String!) {\n  approveAccount(acctId: $acctId, newStatus: $newStatus) {\n    firstName\n    lastName\n    accounts {\n      _id\n      createdAt\n      approvedAt\n      status\n    }\n  }\n}\n`\nexport const CHANGE_ACC_STATUS = gql`\nmutation changeAccStatus($acctId: ID!, $newStatus: String!) {\n    approveAccount(accountNumber: $accountNumber, newStatus: $newStatus) {\n      firstName\n      lastName\n      accounts {\n        _id\n        accountNumber\n        approvedAt\n        status\n      }\n    }\n  }\n`\nexport const MAKE_TRANSACTION = gql`\nmutation makeTransaction($acctId: ID!, $amount: Float!, $transferId: ID!, $type: ID) {\n  makeTransaction(acctId: $acctId, amount: $amount, transferId: $transferId, type: $type) { \n    accounts {\n      transactions {\n        amount\n        _id\n        createdAt\n        transferTo\n        type {\n          name\n        }\n      }\n    }\n  }\n}\n`\nexport const CHANGE_TRANS_STATUS = gql`\nmutation changeTransStatus($transId: ID!, $status: String, $approverId: ID) {\n  approveTransaction(transId: $transId, status: $status, approverId: $approverId) {\n    accounts {\n      transactions {\n        amount\n        _id\n        createdAt\n        transferTo\n        type {\n          name\n        }\n        status\n        approvedAt\n        approverId\n      }\n    }\n  }\n}\n`\n\nexport const ADD_PRODUCT = gql`\nmutation addProduct($name: String!, $description: String, $unitPrice: Float, $unitQty: Int, $termDays: Int) {\n    addProduct(name: $name, description: $description, unitPrice: $unitPrice, unitQty: $unitQty, termDays: $termDays) {\n      _id\n      name\n      description\n      unitPrice\n      unitQty\n      termDays\n    }\n  }\n`\nexport const REMOVE_PRODUCT = gql`\nmutation removeProduct($id: ID!) {\n    removeProduct(_id: $id) {\n      _id\n      name\n      description\n      unitPrice\n      unitQty\n      termDays\n    }\n  }\n`\n","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, {useState} from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n// import { useUserContext } from '../components/GlobalState';\nimport { useMutation } from '@apollo/client';\nimport {LOGIN} from '../utils/mutations'\nimport Auth from '../utils/auth'\n\nexport default function Login() {\n  // const [state, dispatch] = useUserContext(); // contexts and states\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [login, {error}] = useMutation(LOGIN);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const {data} = await login({\n        variables: {email:email,password:password}\n      });\n\n      Auth.login(data.login.token)\n      \n      window.location.replace('/#Dashboard')\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  // const handleSubmit = () => {\n  //   dispatch({\n  //     type: LOGIN,\n  //   })\n  // }\n\n\n  const handleEmailChange = (e) => {\n    setEmail(e.target.value)\n  }\n\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value)\n  }\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <p>\n        Please enter your registered email and related password to log into your account!\n        If you do not have an account, please sign up\n      </p>\n      <Box\n        component=\"form\"\n        sx={{\n          '& .MuiTextField-root': { m: 1, width: '50%' },\n        }}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <div>\n          <TextField\n            required\n            id=\"outlined-required\"\n            label=\"Email\"\n            onChange={handleEmailChange}\n          />\n          <br/>\n          <TextField\n            required\n            id=\"outlined-password-input\"\n            label=\"Password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            onChange={handlePasswordChange}\n          />\n        </div>\n      <br/>\n      <Button variant=\"contained\" onClick={handleSubmit}>Log in</Button>\n    </Box>\n    </Box>\n      \n);\n}\n","import { gql } from '@apollo/client'\n\nexport const QUERY_GETME = gql`\nquery GetMe {\n  getMe {\n    firstName\n    lastName\n    _id\n    accounts {\n      _id\n      accountBalance\n      product {\n        name\n        description\n      }\n      status\n      transactions {\n        amount\n        createdAt\n        type {\n          name\n        }\n      }\n    }\n  }\n}\n`\nexport const QUERY_ALL_USERS = gql`\nquery AllUsers {\n  getAllUsers {\n    _id\n    accounts {\n      _id\n      createdAt\n      product {\n        name\n        description\n      }\n      transactions {\n        amount\n      }\n      status\n    }\n    creditScore\n    firstName\n    lastName\n  }\n}\n`\nexport const QUERY_USER_TRANSACTIONS = gql`\nquery UserTransactions {\n  getAllUsers {\n    firstName\n    lastName\n    accounts {\n      _id\n      transactions {\n        amount\n        approvedAt\n        approverId\n        _id\n        createdAt\n        status\n        transferTo\n      }\n    }\n  }\n}\n`","import * as React from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport Divider from '@mui/material/Divider';\n\nconst style = {\n  width: '100%',\n  bgcolor: 'background.paper',\n};\n\nexport default function AccountSummary({transactions}) {\n  //console.log(transactions)\n  return (\n    <List sx={style} component=\"nav\" aria-label=\"mailbox folders\">\n      {transactions && (transactions.map((transaction,index) => {\n        console.log(transaction.type[0])\n        return (\n          <div key={transaction.createdAt}> \n          <ListItem>\n            <ListItemText primary={transaction.type[0].name+\", made on \"+Date(transaction.createdAt)} secondary={\"$\"+transaction.amount} />\n          </ListItem>\n          <Divider/>\n        </div>\n        )\n        \n      }))}\n    </List>\n  );\n}","import * as React from 'react';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_GETME } from '../utils/queries';\nimport AccountSummary from './AccountSummary';\nimport Auth from '../utils/auth'\n\nconst styles = {\n  main: {\n    paddingTop: \"1rem\",\n    paddingBottom: \"6rem\"\n  }\n}\n\nexport default function Dashboard() {\n  \n  const {loading, data} = useQuery(QUERY_GETME);\n  const accounts = data?.getMe || [];\n  // if (!context.user.admin) {\n  console.log(data)\n \n  if (!loading) { // testing for user logged in\n    return ( // User dashbaord\n      <div style={styles.main}>\n        <h1>Hello, {accounts.firstName}</h1>\n      \n        {accounts.accounts && (accounts.accounts.map((account) => (\n          <Accordion >\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1a-content\"\n              id=\"panel1a-header\"\n            >\n              <Typography>\n                {account.product[0].description}\n                <p>Account: {account._id}</p>\n                <p>Account Balance: ${account.accountBalance}</p>\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <AccountSummary transactions={account.transactions}/>\n            </AccordionDetails>\n          </Accordion>\n        )))}\n        {!accounts.accounts && (\n          <h3>Please speak with a bank representative to request your first account.</h3>\n        )}\n      </div>\n    );\n  } else {\n    return ( // Admin dashboard\n      <div>\n        <h1>Loading</h1>\n      </div>\n    );\n  }\n}","import React from \"react\";\n\nconst styles = {\n  bottomPadding: {\n    paddingBottom: \"16rem\"\n  }\n}\n\nexport default function Contact() {\n  return(\n    <section style={styles.bottomPadding}>\n      <h2>Contact us</h2>\n      <ul>\n        <li>Email: not_a_real_email@hmail.com</li>\n        <li>Phone: +1-416-204-2033</li>\n      </ul>\n    </section>\n  )\n}","import React from \"react\";\n\nconst styles = {\n  finePrint: {\n    fontSize: \"0.4rem\"\n  },\n  bottomPadding: {\n    paddingBottom: \"16rem\"\n  }\n}\n\nexport default function Policy() {\n  return(\n    <section style={styles.bottomPadding}>\n      <h2>Our Policy</h2>\n      <p>\n        Welcome to Swift Bank! Our policy is to make your transactions swift and easy!\n      </p>\n      <p style={styles.finePrint}>\n        Our product does not protect against natural disasters including earthquakes, tsunamis, typhoons, torrential downpour, Australia, volcanic erruptions, ENV's, PHP's, HTML's, PTSD, please speak to your pediatrician to see if Swift bank is right for you.\n      </p>\n    </section>\n  )\n}","import React, { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { CREATE_USER } from '../utils/mutations';\nimport { useMutation } from '@apollo/client';\nimport auth from '../utils/auth';\n\n\nexport default function Signup() {\n  const [email, setEmail] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [addUser, {error, data}] = useMutation(CREATE_USER);\n\n  const SubmitRegister = async (e) => {\n    e.preventDefault();\n    try {\n      let vars = { email:email, firstName:firstName, lastName:lastName, password:password }\n      const { data } = await addUser({\n        variables: {... vars},\n      });\n      auth.login(data.addUser.token);\n    } catch (e) {\n        console.log(e)\n    }\n  }\n\n  const handleEmailChange = (e) => {\n    setEmail(e.target.value);\n  }\n\n  const handleFirstNameChange = (e) => {\n    setFirstName(e.target.value);\n  }\n\n  const handleLastNameChange = (e) => {\n    setLastName(e.target.value);\n  }\n\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value);\n  }\n\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Box\n        component=\"form\"\n        sx={{\n          '& .MuiTextField-root': { m: 1, width: '50%' },\n        }}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <div>\n          <TextField\n            required\n            id=\"outlined-required\"\n            label=\"Email\"\n            onChange={handleEmailChange}\n          />\n          <TextField\n            required\n            id=\"outlined-required\"\n            label=\"First Name\"\n            onChange={handleFirstNameChange}\n          />\n          <TextField\n            required\n            id=\"outlined-required\"\n            label=\"Last Name\"\n            onChange={handleLastNameChange}\n          />\n          <br/>\n          <TextField\n            required\n            id=\"outlined-password-input\"\n            label=\"Password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            onChange={handlePasswordChange}\n          />\n        </div>\n        <br/>\n        <Button variant=\"contained\" onClick={SubmitRegister}>Sign up</Button>\n      </Box>\n    </Box>\n  )\n}","import React, { useState } from 'react';\nimport { from, useMutation, useQuery } from '@apollo/client';\nimport { useTheme } from '@mui/material/styles';\nimport { QUERY_GETME } from '../utils/queries';\nimport { \n  OutlinedInput,\n  InputLabel, \n  MenuItem, \n  FormControl, \n  Select, \n  Box, \n  TextField, \n  Button, \n} from '@mui/material';\nimport { MAKE_TRANSACTION } from '../utils/mutations';\n\n// Select box styling\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    }\n  }\n}\n\nexport default function MakeTransfer() {\n  const [fromAccount, setFromAccount] = useState(\"\");\n  const [toAccount, setToAccount] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [makeTrans, {error, cheese}] = useMutation(MAKE_TRANSACTION)\n\n  const {loading, data} = useQuery(QUERY_GETME);\n  const accounts = data?.getMe || [];\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (isNaN(parseFloat(amount))){\n      alert(\"Please enter a valid amount here\")\n      return\n    }\n    try {\n      let vars = {acctId: fromAccount, transferId: toAccount, amount: parseFloat(amount), type: \"638e5d4b39fe228114baeb3d\"}\n\n      console.log(vars)\n      \n      const { data } = await makeTrans ({\n        variables: {... vars},\n      })\n\n      console.log(data)\n\n      //do something? user can make another transaction or be redirected elsewhere\n      \n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handleFromAccountSelect = (e) => {\n    let account = e.target.value;\n    document.querySelector(\".notranslate\").textContent = account[1];\n    setFromAccount(account[1])\n  }\n\n  const handleToAccountSelect = (e) => {\n    console.log(fromAccount)\n    setToAccount(e.target.value)\n  }\n\n  const handleAmountChange = (e) => {\n    setAmount(e.target.value)\n  }\n\n  if(!loading) {\n    return (\n      <Box\n        component=\"form\"\n        sx={{\n          '& .MuiTextField-root': { m: 1, width: '25ch' },\n        }}\n        noValidate\n        autoComplete=\"off\"\n        >\n          <div>\n            <FormControl sx={{ m:1, width:300}}>\n              <InputLabel id=\"simple-select-label\">Choose account to transfer from</InputLabel>\n              <Select\n                labelId=\"simple-select\"\n                id=\"multiple-account\"\n                multiple\n                value={[\"Select\"]}\n                onChange={handleFromAccountSelect}\n                input={<OutlinedInput label=\"Account\"/>}\n                MenuProps={MenuProps}\n              >\n                {accounts.accounts.map ((account) => (\n                  <MenuItem\n                    key={account.accountNumber}\n                    value={account._id}\n                  >\n                    {account._id}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <TextField\n              required\n              id=\"outlined-required\"\n              label=\"Recipient Account\"\n              onChange={handleToAccountSelect}\n            />\n            <TextField\n              required\n              id=\"outlined-required\"\n              label=\"Amount\"\n              onChange={handleAmountChange}\n            />\n          </div>\n          <br/>\n          <Button variant=\"contained\" onClick={handleSubmit}>Submit Transfer</Button>\n      </Box>\n    )\n  } else {\n    return ( // Admin dashboard\n      <div>\n        <h1>Loading</h1>\n      </div>\n    );\n  }\n}\n    ","import React from \"react\";\n\nconst styles = {\n  bottomPadding: {\n    paddingBottom: \"16rem\"\n  }\n}\n\nexport default function Contact() {\n  return(\n    <section style={styles.bottomPadding}>\n      <h1>Welcome to Swift Bank!</h1>\n      <h2>Your personal banking app, Swiftly available, anywhere you go!</h2>\n      <p>We offer a wide range of accounts and line of credit to ensure your money can be managed at the comfort of your home, just a click away! Sign up now on the signup page or log into your existing Swift Bank account to access your banking at home, or on the go! Find out more in our Contact page!</p>\n    </section>\n  )\n}","import * as React from 'react';\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  InputLabel, \n  MenuItem, \n  FormControl, \n  Select, \n  Box, \n  Button, \n} from '@mui/material';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { QUERY_USER_TRANSACTIONS } from '../utils/queries';\nimport { CHANGE_TRANS_STATUS } from '../utils/mutations'\nimport { useState } from 'react';\nimport Auth from '../utils/auth'\n\nconst styles = {\n  main: {\n    paddingTop: \"1rem\",\n    paddingBottom: \"6rem\"\n  },\n  button: {\n    margin: \"1rem\"\n  },\n  name: {\n    fontSize: \"2rem\",\n    paddingRight: \"1rem\"\n  }\n}\n\nexport default function Transactions() {\n  const admin = Auth.getProfile().data.admin;\n  const [tStatus, setTStatus] = useState(\"\")\n  const [appTrans, {holenso, cabocha}] = useMutation(CHANGE_TRANS_STATUS)\n\n  const {loading, data} = useQuery(QUERY_USER_TRANSACTIONS);\n  const users = data?.getAllUsers || [];\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const tId = prompt(\"To confirm, please enter in the transaction ID you are updating\")\n    let tString\n    tStatus === 'approve' ? tString = 'approved' : tString = 'rejected'\n    \n    try {\n      let vars = {transId: tId, status: tString, approverId: Auth.getProfile().data._id\n      }\n      console.log(vars)\n\n      const { data } = await appTrans ({\n        variables: {...vars}\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handleTStatus = (e) => {\n    setTStatus(e.target.value)\n  }\n\n  if (!loading && admin) {\n      return ( // Admin dashbaord\n        <div style={styles.main}>\n          {(users) && (\n           <List\n           sx={{\n             width: '100%',\n             bgcolor: 'background.paper',\n           }}\n           >\n            {users.map((u) => {\n              return (\n                <div>\n                  \n                    {\n                      u.accounts.map(a => {\n                        return (\n                          <div>\n                            {\n                              a.transactions.map(t => {\n                                return (\n                                  <ListItem>\n                                    <div style={styles.name}>{u.firstName + \" \" + u.lastName}</div>\n                                  <div>\n                                    <ListItemText primary={\"$ \" + t.amount} secondary= {\"To: \" + t.transferTo + \" Made on: \" + t.createdAt} tertiary=\"test\"/> \n                                    <Divider component=\"li\" />\n                                    <Box\n                                      component=\"form\"\n                                      sx={{\n                                        '& .MuiTextField-root': { m: 1, width: '25ch' },\n                                      }}\n                                      noValidate\n                                      autoComplete=\"off\"\n                                      >\n                                      <div>\n                                        <FormControl fullWidth>\n                                          <InputLabel id=\"change-trans-status-label\">Select an action</InputLabel>\n                                          <Select\n                                            labelId=\"change-trans-status-label\"\n                                            id=\"change-trans-status\"\n                                            // fix the value please\n                                            value={tStatus}\n                                            label=\"Approve or Reject\"\n                                            onChange={handleTStatus}\n                                          >\n                                            <MenuItem value={\"approve\"}>Approve</MenuItem>\n                                            <MenuItem value={\"reject\"}>Reject</MenuItem>\n                                          </Select>\n                                        </FormControl>\n                                      </div>\n                                      <Button variant=\"contained\" onClick={handleSubmit} style={styles.button}>Change Transaction Status</Button>\n                                    </Box>\n                                  </div>\n                                  <Divider/>\n                                  </ListItem>\n                                )\n                              })\n                            }\n                          </div>\n                        )\n                      })\n                    }\n                  \n                  <Divider component=\"li\" />\n                </div>\n              )\n            })}\n          </List>\n          )}\n        </div>\n      )\n  } else if (!loading && !admin) {\n    return ( // Admin dashboard\n      <div>\n        <h1>This page is for admins only.</h1>\n        <h2>Please sign in as an admin to view all transactions.</h2>\n      </div>\n    );\n  } else {\n    return ( // Admin dashboard\n      <div>\n        <h1>Loading</h1>\n      </div>\n    );\n  }\n}","export default __webpack_public_path__ + \"static/media/swiftbank_logo.fef9418a.png\";","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Link from '@mui/material/Link';\nimport Login from '../pages/Login';\nimport Dashboard from '../pages/dashboard';\nimport Contact from '../pages/Contact';\nimport AccountSummary from '../pages/AccountSummary';\nimport Policy from '../pages/Policy';\nimport Signup from '../pages/Signup';\nimport MakeTransfer from \"../pages/MakeTransfer\";\nimport Auth  from \"../utils/auth\";\nimport Home from \"../pages/Home\";\nimport Transactions from '../pages/Transactions';\nimport {\n  AppBar,\n  Box,\n  CssBaseline,\n  Divider,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  Toolbar,\n  ListItemButton,\n  Typography\n} from \"@mui/material\"\nimport logo from \"../images/swiftbank_logo.png\";\n\nconst drawerWidth = 240;\n\nconst styles = {\n  contentPadding: {\n    paddingTop: \"5rem\"\n  }\n}\n\n// testing purposes ~~~~~~~~~~~~~~~~~~~~~~~~\nlet user=false;\nlet admin=false;\nlet loggedIn = Auth.loggedIn();\nif (loggedIn) {\n  admin = Auth.getProfile().data.admin;\n  admin ? user=false : user=true;\n}\n\nconst userOptions = [\n  {\n    label: \"My Dashboard\",\n    link: \"Dashboard\"\n  }, \n  {\n    label: \"View My Accounts\",\n    link: \"AccountSummary\"\n  },\n  {\n    label: \"Send a Transfer\",\n    link: \"MakeTransfer\"\n  },\n  {\n    label: \"Request a Loan\",\n    link: \"RequestLoan\"\n  }\n];\n\nconst loginOptions = [\n  {\n    label: \"Log in!\",\n    link: \"Login\"\n  },\n  {\n    label: \"Sign up now!\",\n    link: \"Signup\"\n  },\n]\n\nconst adminOptions = [\n  {\n    label: \"View all transactions\",\n    link: \"Transactions\"\n  }\n]\n\nconst extraOptions = [\n  {\n    label: \"Home\",\n    link: \"Home\"\n  },\n  {\n    label: \"Contact us!\",\n    link: \"Contact\"\n  },\n  {\n    label: \"Our policy\",\n    link: \"Policy\"\n  }\n]\n\nfunction Container(props) {\n  const [currentPage, setCurrentPage] = useState('Home');\n  const { window } = props;\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const logout = (e) => {\n    e.preventDefault();\n    Auth.logout();\n  }\n\n  const renderPage = () => {\n\n    switch (currentPage) {\n      case \"Signup\": return <Signup/>;\n      case \"Login\": return <Login/>;\n      case \"Dashboard\": return <Dashboard/>;\n      case \"AccountSummary\": return <AccountSummary/>;\n      case \"MakeTransfer\": return <MakeTransfer/>;\n      case \"Policy\": return <Policy/>;\n      case \"Contact\": return <Contact/>;\n      case \"Transactions\": return <Transactions/>;\n      default: return <Home/>\n    }\n  }\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const drawer = (\n    <div>\n      <Toolbar>\n      <Link href=\"/\">\n          <Box\n            component=\"img\"\n            sx={{ height: 54 }}\n            alt=\"Logo\"\n            src={logo}\n          />\n        </Link>\n      </Toolbar>\n      <Divider />\n      {/* User Routes */}\n      {(user && !admin) && (\n        <List>\n            {userOptions.map((option) => (\n              <ListItem key={option.link} disablePadding>\n                  <ListItemButton href={\"#\"+option.link} onClick={() => setCurrentPage(option.link)}>\n                    <ListItemText primary={option.label} />\n                  </ListItemButton>\n              </ListItem>\n            ))}\n            <ListItem key=\"logout\" disablePadding>\n                <ListItemButton onClick={logout}>\n                  <ListItemText primary=\"Log out\" />\n                </ListItemButton>\n            </ListItem>\n        </List>\n      )}\n      {/* Admin Routes */}\n      {(admin) && (\n        <List> \n        {adminOptions.map((option) => (\n          <ListItem key={option.link} disablePadding>\n            <ListItemButton href={\"#\"+option.link} onClick={() => setCurrentPage(option.link)}>\n              <ListItemText primary={option.label} />\n            </ListItemButton>\n          </ListItem>\n        ))}\n          <ListItem key=\"logout\" disablePadding>\n                <ListItemButton onClick={logout}>\n                  <ListItemText primary=\"Log out\" />\n                </ListItemButton>\n            </ListItem>\n        </List>\n      )}\n      {(!user && !admin) && (\n        <List> \n        {loginOptions.map((option) => (\n          <ListItem key={option.link} disablePadding>\n            <ListItemButton href={\"#\"+option.link} onClick={() => setCurrentPage(option.link)}>\n              <ListItemText primary={option.label} />\n            </ListItemButton>\n          </ListItem>\n        ))}\n        </List>\n      )}\n      <Divider/>\n      <List>\n      {extraOptions.map((option) => (\n          <ListItem key={option.link} disablePadding>\n            <ListItemButton href={\"#\"+option.link} onClick={() => setCurrentPage(option.link)}>\n              <ListItemText primary={option.label} />\n            </ListItemButton>\n          </ListItem>\n        ))}\n      </List>\n  </div>\n  );\n\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        sx={{\n          width: { sm: `calc(100% - ${drawerWidth}px)` },\n          ml: { sm: `${drawerWidth}px` },\n        }}\n      >\n        <Toolbar>\n        \n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            sx={{ mr: 2, display: { sm: 'none' } }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap component=\"div\">\n            Swift Bank\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Box\n        component=\"nav\"\n        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}\n        aria-label=\"mailbox folders\"\n      >\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Drawer\n          container={container}\n          variant=\"temporary\"\n          open={mobileOpen}\n          onClose={handleDrawerToggle}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n          sx={{\n            display: { xs: 'block', sm: 'none' },\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\n          }}\n        >\n          {drawer}\n        </Drawer>\n        <Drawer\n          variant=\"permanent\"\n          sx={{\n            display: { xs: 'none', sm: 'block' },\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\n          }}\n          open\n        >\n          {drawer}\n        </Drawer>\n      </Box>\n      <Box\n        style={styles.contentPadding}\n        component=\"main\"\n        sx={{ flexGrow: 1, p: 3, width: { sm: `calc(100% - ${drawerWidth}px)` } }}\n      >\n        {renderPage()}\n      </Box>\n    </Box>\n  );\n}\n\nContainer.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n};\n\nexport default Container;\n","import React from \"react\";\n\nconst styles = {\n  footer: {\n    background: \"#2c3437\",\n    color: \"gray\", \n    position: \"fixed\", \n    bottom: 0,\n    width: '100%',\n    height: '15%'\n  }\n}\n\nexport default function Footer() {\n  return (\n    <footer style={styles.footer}>\n      <br/>\n      <center>Copyright @ 2022 Swift Bank...</center>\n    </footer>\n  );\n\n  \n}","import React from \"react\";\nimport Container from './NavandPage';\nimport Footer from \"./Footer\"\n\nconst Page = () => {\n  return (\n    <div>\n      <Container/>\n      <Footer/>\n    </div>\n  )\n  \n};\nexport default Page;\n","import { useReducer } from 'react';\nimport {\n  OPEN_ACCOUNT,\n  CREATE_USER,\n  CHANGE_ACC_STATUS,\n  MAKE_TRANSACTION,\n  ADD_PRODUCT,\n  REMOVE_PRODUCT,\n  LOGIN,\n} from './actions';\n\nexport const reducer = (state,action) => {\n  switch (action.type) {\n    case OPEN_ACCOUNT: {\n      const newAccount = action.payload;\n      return {\n        ...state,\n        accounts: [...state.accounts, newAccount],\n      }\n    }\n    case CREATE_USER: {\n      const newUser = action.payload;\n      return {\n        ...state,\n        users: [...state.users, newUser]\n      }\n    }\n    case CHANGE_ACC_STATUS: {\n      const accIndex = state.accounts.findIndex((account) => account.id === action.payload.id); // locate index\n      const updatedAccount = { // set updated object\n        ...state.accounts[accIndex],\n        ...action.payload,\n      };\n      const list = [...state.accounts];\n      list[accIndex] = updatedAccount;\n\n      return {\n        ...state,\n        accounts: list,\n      }\n    }\n    case MAKE_TRANSACTION: {\n      const newTransaction = action.payload;\n      return {\n        ...state,\n        transactions: [...state.transactions, newTransaction]\n      }\n    }\n    case ADD_PRODUCT: {\n      const newProduct = action.payload;\n      return {\n        ...state,\n        products: [...state.products, newProduct]\n      }\n    }\n    case REMOVE_PRODUCT: {\n      return {\n        ...state,\n        products: [...state.products].filter((product) => product !== action.payload)\n      }\n    }\n    case LOGIN: {\n      return{\n        ...state,\n        isLoggedIn: !action.isLoggedIn,\n      }\n    }\n    default:\n      return state;\n  }\n}\n\nexport function useUserReducer (initialState) {\n  return useReducer(reducer, initialState);\n}","export const OPEN_ACCOUNT = \"OPEN_ACCOUNT\";\nexport const CREATE_USER = \"CREATE_USER\";\nexport const CHANGE_ACC_STATUS = \"CHANGE_ACC_STATUS\";\nexport const MAKE_TRANSACTION = \"MAKE_TRANSACTION\";\nexport const CHANGE_TRANS_STATUS = \"CHANGE_TRANS_STATUS\";\nexport const ADD_PRODUCT = \"ADD_PRODUCT\";\nexport const REMOVE_PRODUCT = \"REMOVE_PRODUCT\";\nexport const LOGIN = \"LOGIN\";","import React, {createContext, useContext} from 'react';\nimport { useUserReducer } from '../utils/reducers';\n\nconst UserContext = createContext(); // create user context\nconst {Provider} = UserContext; // isolates provider from context, provider feeds to state change observers, consumers\n\nconst UserProvider = ({ value = [], ...props }) => { \n  const [state, dispatch] = useUserReducer({\n    isLoggedIn: false,\n    isAdmin: false,\n    userName: 'admin',\n    clientId: \"\"\n  });\n\n  return <Provider value={[state, dispatch]} {...props}/> // pass the state and dispatch from the reducer to the provider\n};\n\nconst useUserContext = () => useContext(UserContext); // define function to use user context\n\nexport { UserProvider, useUserContext }","import React from \"react\";\nimport Container from './components/ContentContainer'\nimport { UserProvider } from \"./components/GlobalState\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\nconst App = () => {\n  return(\n    <ApolloProvider client={client}>\n      <UserProvider>\n        <div className=\"App\">\n          <Container/>\n        </div>\n      </UserProvider>\n    </ApolloProvider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}